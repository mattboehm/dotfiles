"Settings {{{
set background=dark
set backspace=2
set display+=lastline
set hlsearch
set modeline
set mouse=a
set number 
set t_Co=256

let mapleader=","
let localleader="\\"

syntax on
filetype plugin on

" Backups {{{
" (thanks Steve Losh)
set backup
set swapfile
set undofile

set undodir=~/.vim/tmp/undo//
set backupdir=~/.vim/tmp/backup//
set directory=~/.vim/tmp/swap//

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
"}}}
"}}}
"Plugins {{{
call plug#begin()
"Visuals:
Plug 'bling/vim-airline'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'osyo-manga/vim-brightest'
Plug 'ciaranm/inkpot'
Plug 'vim-scripts/wombat256.vim'

"Text Objects:
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'bps/vim-textobj-python'
Plug 'vim-scripts/argtextobj.vim'
Plug 'wellle/targets.vim'

"Essentials: simple extensions of vim functionality
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-surround'
Plug 'stefandtw/quickfix-reflector.vim'
Plug 'tpope/vim-repeat'

"Opening Files:
Plug 'kien/ctrlp.vim' "{{{
    nnoremap <leader>m :CtrlPMRUFiles<CR>
    let g:ctrlp_map = ',f'
    let g:ctrlp_working_path_mode = 2
    let g:ctrlp_extensions = ['dir']
    let g:ctrlp_custom_ignore = {
    \ 'dir':  'public/js/lib$',
    \ 'file': '\.exe$\|\.so$\|\.dll$|\.swp$|\.swo$|\.pyc$|\.orig$',
    \ 'link': 'some_bad_symbolic_links',
    \ }
    "use git ls-files so that files in .gitignore aren't shown.
    let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

    "}}}
Plug 'mattboehm/vim-unstack' "{{{
    nnoremap <silent> <c-u> :UnstackFromSelection<CR>
    "}}}
Plug 'tpope/vim-vinegar'

"Expanding Text:
Plug 'tristen/vim-sparkup'
Plug 'SirVer/ultisnips' "{{{
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
    let g:UltiSnipsSnippetDirectories=["snippets"]
    let g:ultisnips_python_style="sphinx"
    "}}}

"Other:
Plug 'tpope/vim-fugitive' | Plug 'tommcdo/vim-fugitive-blame-ext' "{{{
    "Fugitive mappings
    nnoremap <leader>gc :Gcommit<CR>
    nnoremap <leader>gd :Gdiff<CR>
    nnoremap <leader>gw :Gwrite<CR>
    nnoremap <leader>gr :Gread<CR>
    nnoremap <leader>gl :Glog --reverse<CR>
    nnoremap <leader>gp :Git push<CR>
    nnoremap <leader>gb :Gblame<CR>
    nnoremap <leader>gB :Gbrowse<CR>
    nnoremap <leader>gP :Git push gitlab<CR>
    nnoremap <leader>ga :tab sp \| Gvedit :1 \| windo diffthis<CR>

    "Fugitive extensions
    nnoremap <silent> <leader>gm :tab sp<CR>:Glistmod<CR>
    nnoremap <silent> ]d :call g:DiffNextLoc()<CR>
    nnoremap <silent> [d :call g:DiffPrevLoc()<CR>
    function! g:ViewCommits(num_commits)
        let commit=0
        while commit < a:num_commits
            execute "Gedit HEAD~".commit
            topleft vsp
            let commit += 1
        endwhile
        q
    endfunction

    command! Glistmod only | call g:ListModified() | Gdiff
    function! g:ListModified()
        let old_makeprg=&makeprg
        "let &makeprg = "git diff --cached --name-only"
        let &makeprg = "git ls-files -m"
        let old_errorformat=&errorformat
        let &errorformat="%f"
        lmake
        let &makeprg=old_makeprg
        let &errorformat=old_errorformat
    endfunction

    function! g:DiffNextLoc()
        windo set nodiff
        only
        lnext
        Gdiff
    endfunction
    function! g:DiffPrevLoc()
        windo set nodiff
        only
        lprevious
        Gdiff
    endfunction
    "}}}
Plug 'tpope/vim-fireplace'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'tpope/vim-dispatch'
Plug 'mileszs/ack.vim' "{{{
    nnoremap <leader>a :Ack<space>
    "}}}
Plug 'sjl/gundo.vim'
Plug 'mattboehm/vim-accordion'
Plug 'chrisbra/NrrwRgn'

call plug#end()
"}}}
"Color schemes {{{
if has("gui_running")
  colorscheme inkpot
else
  colorscheme wombat256mod
endif
"}}}
"Key mapping {{{
nnoremap ; :
xnoremap ; :
xnoremap : ;

"use jj to escape from insert mode
inoremap jj <esc>
"h is in the j position on dvorak keyboards
inoremap hh <esc>

"x escapes visual mode
xnoremap x <Esc>
"vv selects til end of line (not incl newline)
vnoremap v $h
"Y in visual mode copies to selection clipboard
vnoremap Y "*y

"make Y behave more like C and D
nnoremap Y y$

"complete lines
inoremap <C-Space> <C-X><C-L>

"clear highlight search
nmap <silent> <leader><space> :nohlsearch<CR>

"swap highlighted text with last deleted text
xnoremap <C-x> <Esc>`.``gvP``P

"gp selects code that was just pasted in the visual mode last used
nnoremap <expr> gp  '`[' . strpart(getregtype(), 0, 1) . '`]'

"z-Up/Down goes to top/bottom of current fold
nnoremap z<Up> [z
nnoremap z<Down> ]z

"Tabs and Splits {{{
"when opening files in splits/tabs, I first split the current buffer into a
"new vsplit/tab and then open the new file with whatever method suits me.

"Ctrl-\ opens a vsplit
"I remember this because shift-\ is | which looks like a vertical split.
nnoremap <C-\> :vsp<CR>
"tab handling
nnoremap <leader>t :tab sp<CR>
nnoremap <leader>w :tabc<CR>

"Ctrl-Shift-ArrowKeys = resize active split
nnoremap <C-S-Left> <C-W><lt>
nnoremap <C-S-Right> <C-W>>
nnoremap <C-S-Up> <C-W>+
nnoremap <C-S-Down> <C-W>-

"Ctrl-ArrowKeys = move between splits
nnoremap <C-Left> <C-W><left>
nnoremap <C-Right> <C-W><right>
nnoremap <C-Up> <C-W><up>
nnoremap <C-Down> <C-W><down>
"}}}
"ctrl-j/k to jump between 'compiler' messages
nnoremap <silent> <C-j> :cn<CR>
nnoremap <silent> <C-k> :cp<CR>

"open vimrc in new tab
"if ~/.vimrc is a symlink, it resolves the symlink before opening so that
"fugitive is happy
nnoremap <leader>ve :execute "tab sp" resolve(expand("~/.vim/vimrc"))<CR>
"open pentadactyl config
nnoremap <leader>vf :execute "tab sp" resolve(expand("~/.pentadactylrc"))<CR>

nnoremap <leader>vp :execute "tab sp" resolve(expand("~/.vim/bundle/mbpython/ftplugin/python.vim"))<CR>

"reload vimrc
nnoremap <leader>vv :source ~/.vimrc<CR>
"edit snippets
nnoremap <leader>vs :tab sp <bar> UltiSnipsEdit<CR>

"F2 toggles line numbers
nnoremap <silent> <F2> :set number!<CR>

"F5 run python
nnoremap <F5> :!python %<CR>

function! g:DiffToggle()
  if &diff
    diffoff
  else
    diffthis
  endif
endfunction

"Toggle diff for current window
nnoremap <silent> <leader>d :call g:DiffToggle()<CR>

"Space toggles folds
nnoremap <Space> za

"Visual Mode */# from Scrooloose via Steve Losh {{{
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction

vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>
"}}}
"}}}
"Commands {{{

"ScratchBuffer: opens an unnamed buffer that doesn't need to be saved
command! ScratchBuffer setlocal buftype=nofile bufhidden=hide noswapfile

"DiffOrig: opens a diff between the current buffer and the saved version
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
	 	\ | wincmd p | diffthis

"Demo: load my plugins to demo them
command! Demo cd ~/repos/crashcart/plugin | so unstack.vim | so ../../accordion/plugin/accordion.vim | e sample_trace.txt | exe 'Ack! remap' | wincmd p


"SetQfList: copy the loclist to the qflist
command! SetQfList call setqflist(getloclist(0))

"Pylog {{{
function! g:PylogShortcuts()
	nnoremap <leader><down> :call DoStep("ov")<CR>
	nnoremap <leader><right> :call DoStep("f")<CR>
	nnoremap <leader><left> :call DoStep("b")<CR>
	nnoremap <leader><up> :call DoStep("ou")<CR>
	nnoremap <leader>. :call DoStep("l")<CR>
endfunction
command! PylogDemo source ~/repos/pylog/replay.vim | edit ~/repos/pylog/trace2.txt | call g:PylogShortcuts() | call StartStepper(expand("%"))
"}}}
"Line highlighting {{{
highlight HL ctermbg=darkgray
sign define hl linehl=HL
let g:highlightLineSignId = 74000
function! g:HighlightLine()
	execute 'sign place' g:highlightLineSignId 'line='.line(".") 'name=hl' 'file='.expand("%")
	let g:highlightLineSignId += 1
endfunction
"}}}
"}}}
" vim:foldmethod=marker
